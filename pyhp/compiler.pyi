from types import CodeType
from typing import final, Union

from .parser import prepare_iterator


def align_code(source: str, /, start: int = ..., end: int = ...) -> str: ...


@final
class command_type:
    def __str__(self) -> str: ...

    def __repr__(self) -> str: ...

    def __int__(self) -> int: ...


NONE: command_type = ...
TEXT: command_type = ...
EVAL: command_type = ...
EXEC: command_type = ...


@final
class command:
    @property
    def type(self) -> command_type: ...

    @property
    def value(self) -> Union[str, CodeType]: ...


@final
class compiler_iterator:
    @property
    def _source(self) -> str: ...

    def __next__(self) -> command: ...


def compile(pi: prepare_iterator, /) -> compiler_iterator: ...
