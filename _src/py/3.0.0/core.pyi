from typing import NoReturn, Tuple, Union, Literal, Any


class parser_iterator:
    def __iter__(self, /) -> parser_iterator: ...

    def __next__(self, /) -> parser_match: ...

    def __del__(self, /) -> NoReturn: ...

    @property
    def _source(self, /) -> str: ...


class parser_match:
    def __del__(self, /) -> NoReturn: ...

    def __repr__(self, /) -> str: ...

    @property
    def value(self, /) -> str: ...

    @property
    def start(self, /) -> int: ...

    @property
    def end(self, /) -> int: ...

    @property
    def type(self, /) -> int: ...


def parse(source: str, /) -> parser_iterator: ...


RAW: int = ...
BLOCK: int = ...
INLINE: int = ...
BLOCK3: int = ...
INLINE3: int = ...
BLOCK2: int = ...
INLINE2: int = ...
BLOCK1: int = ...
INLINE1: int = ...


def align(source: str, /) -> str: ...


class __page_code:
    def __del__(self, /) -> NoReturn: ...

    def __repr__(self, /) -> str: ...

    def __iter__(self, /) -> page_code_iterator: ...


__CODE_TYPE = type(compile("1", "<>", "eval"))


class page_code_iterator:
    def __del__(self, /) -> NoReturn: ...

    def __repr__(self, /) -> str: ...

    def __iter__(self, /) -> page_code_iterator: ...

    def __next__(self, /) -> Tuple[int, Union[str, __CODE_TYPE]]: ...


def compile(source: str, /, name: str, *, optimize: int = ...) -> __page_code: ...


TEXT: int = ...
EVAL: int = ...
EXEC: int = ...


class _base_stream:
    pass


class stdin_preset(_base_stream):
    def __del__(self, /) -> NoReturn: ...

    def __del__(self, /) -> NoReturn: ...

    def read(self, n: int = ..., /) -> str: ...

    def readline(self, n: int = ..., /) -> str: ...

    def close(self, /) -> NoReturn: ...

    @property
    def closed(self, /) -> bool: ...

    @property
    def mode(self, /) -> Literal["rt"]: ...

    @property
    def name(self, /) -> Literal["<stdin>"]: ...

    def fileno(self, /) -> Literal[0]: ...

    def flush(self, /) -> NoReturn: ...

    def isatty(self, /) -> Literal[False]: ...

    def readable(self, /) -> Literal[True]: ...

    def seekable(self, /) -> Literal[False]: ...

    def tell(self, /) -> int: ...

    @property
    def encoding(self, /) -> Literal[None]: ...

    @property
    def errors(self, /) -> Literal[None]: ...

    @property
    def newlines(self, /) -> Literal["\n"]: ...

    def getvalue(self, /) -> str: ...

    def writable(self, /) -> Literal[False]: ...


class stdout(_base_stream):
    def __del__(self, /) -> NoReturn: ...

    def close(self, /) -> NoReturn: ...

    @property
    def closed(self, /) -> bool: ...

    @property
    def mode(self, /) -> Literal["wt"]: ...

    @property
    def name(self, /) -> Literal["<stdout>"]: ...

    def fileno(self, /) -> Literal[1]: ...

    def flush(self, /) -> NoReturn: ...

    def isatty(self, /) -> Literal[False]: ...

    def readable(self, /) -> Literal[False]: ...

    def seekable(self, /) -> Literal[False]: ...

    def tell(self, /) -> int: ...

    @property
    def encoding(self, /) -> Literal["utf-8"]: ...

    @property
    def errors(self, /) -> Literal["strict"]: ...

    @property
    def newlines(self, /) -> Literal["\n"]: ...

    @property
    def buffer(self, /) -> bytes: ...

    def writable(self, /) -> Literal[True]: ...

    def write(self, s: str, /) -> int: ...


class stderr(_base_stream):
    def __del__(self, /) -> NoReturn: ...

    def close(self, /) -> NoReturn: ...

    @property
    def closed(self, /) -> bool: ...

    @property
    def mode(self, /) -> Literal["wt"]: ...

    @property
    def name(self, /) -> Literal["<stderr>"]: ...

    def fileno(self, /) -> Literal[2]: ...

    def flush(self, /) -> NoReturn: ...

    def isatty(self, /) -> Literal[False]: ...

    def readable(self, /) -> Literal[False]: ...

    def seekable(self, /) -> Literal[False]: ...

    def tell(self, /) -> int: ...

    @property
    def encoding(self, /) -> Literal["utf-8"]: ...

    @property
    def errors(self, /) -> Literal["strict"]: ...

    @property
    def newlines(self, /) -> Literal["\n"]: ...

    @property
    def buffer(self, /) -> bytes: ...

    def writable(self, /) -> Literal[True]: ...

    def write(self, s: str, /) -> int: ...


class stdout_pipe(_base_stream):
    def __del__(self, /) -> NoReturn: ...

    def close(self, /) -> NoReturn: ...

    @property
    def closed(self, /) -> bool: ...

    @property
    def mode(self, /) -> Literal["rt"]: ...

    @property
    def name(self, /) -> Literal["<stdout>"]: ...

    def fileno(self, /) -> Literal[1]: ...

    def flush(self, /) -> NoReturn: ...

    def isatty(self, /) -> Literal[False]: ...

    def readable(self, /) -> Literal[True]: ...

    def seekable(self, /) -> Literal[False]: ...

    def tell(self, /) -> int: ...

    @property
    def encoding(self, /) -> Literal["utf-8"]: ...

    @property
    def errors(self, /) -> Literal["strict"]: ...

    @property
    def newlines(self, /) -> Literal["\n"]: ...

    @property
    def buffer(self, /) -> bytes: ...

    def writable(self, /) -> Literal[False]: ...

    def read(self, n: int = ..., /) -> str: ...


class stderr_pipe(_base_stream):
    def close(self, /) -> NoReturn: ...

    @property
    def closed(self, /) -> bool: ...

    @property
    def mode(self, /) -> Literal["rt"]: ...

    @property
    def name(self, /) -> Literal["<stderr>"]: ...

    def fileno(self, /) -> Literal[2]: ...

    def flush(self, /) -> NoReturn: ...

    def isatty(self, /) -> Literal[False]: ...

    def readable(self, /) -> Literal[True]: ...

    def seekable(self, /) -> Literal[False]: ...

    def tell(self, /) -> int: ...

    @property
    def encoding(self, /) -> Literal["utf-8"]: ...

    @property
    def errors(self, /) -> Literal["strict"]: ...

    @property
    def newlines(self, /) -> Literal["\n"]: ...

    @property
    def buffer(self, /) -> bytes: ...

    def writable(self, /) -> Literal[False]: ...

    def read(self, n: int = ..., /) -> str: ...


def _exec(source: Union[str, __page_code], /) -> NoReturn: ...


def exec(source: __page_code, globals: dict, stdin: Any, stdout: Any, stderr: Any, /) -> NoReturn: ...
